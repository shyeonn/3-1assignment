$date
	Thu Mar 24 02:08:03 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module hex2ascii_tb $end
$var wire 7 ! Ascii_St [6:0] $end
$var wire 7 " Ascii_Df [6:0] $end
$var wire 7 # Ascii_Bh [6:0] $end
$var reg 4 $ Hex_Bh [3:0] $end
$var reg 4 % Hex_Df [3:0] $end
$var reg 4 & Hex_St [3:0] $end
$var integer 32 ' i [31:0] $end
$scope module behavior $end
$var wire 4 ( H [3:0] $end
$var reg 7 ) A [6:0] $end
$upscope $end
$scope module dataflow $end
$var wire 4 * H [3:0] $end
$var wire 7 + A [6:0] $end
$upscope $end
$scope module struct $end
$var wire 1 , A0_A $end
$var wire 1 - A0_B $end
$var wire 1 . A0_C $end
$var wire 1 / A0_D $end
$var wire 1 0 A1_A $end
$var wire 1 1 A1_B $end
$var wire 1 2 A1_C $end
$var wire 1 3 A2_A $end
$var wire 1 4 A2_B $end
$var wire 1 5 A2_C $end
$var wire 1 6 A4 $end
$var wire 1 7 A5 $end
$var wire 1 8 A6_A $end
$var wire 1 9 A6_B $end
$var wire 4 : H [3:0] $end
$var wire 1 ; NH0 $end
$var wire 1 < NH1 $end
$var wire 1 = NH2 $end
$var wire 1 > NH3 $end
$var wire 7 ? A [6:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110000 ?
1>
1=
1<
1;
b0 :
09
08
17
16
05
04
03
02
01
00
0/
0.
0-
0,
b110000 +
b0 *
b110000 )
b0 (
b0 '
b0 &
b0 %
b0 $
b110000 #
b110000 "
b110000 !
$end
#10
b110001 !
b110001 ?
0;
1,
1-
b1 '
b1 &
b1 :
#20
07
06
b110010 !
b110010 ?
1;
0<
10
0,
0-
b10 '
b10 &
b10 :
#30
b110011 !
b110011 ?
0;
11
1,
b11 '
b11 &
b11 :
#40
b110100 !
b110100 ?
1;
1<
0=
13
00
01
0,
b100 '
b100 &
b100 :
#50
b110101 !
b110101 ?
0;
14
1,
b101 '
b101 &
b101 :
#60
b110110 !
b110110 ?
1;
0<
04
15
10
0,
b110 '
b110 &
b110 :
#70
b110111 !
b110111 ?
0;
14
11
1,
b111 '
b111 &
b111 :
#80
17
16
b111000 !
b111000 ?
1;
1<
1=
0>
03
04
05
00
01
0,
b1000 '
b1000 &
b1000 :
#90
b111001 !
b111001 ?
0;
1-
b1001 '
b1001 &
b1001 :
#100
1.
07
06
b1000001 !
b1000001 ?
1;
0<
19
0-
b1010 '
b1010 &
b1010 :
#110
0.
b1000010 !
b1000010 ?
0;
11
b1011 '
b1011 &
b1011 :
#120
1/
12
b1000011 !
b1000011 ?
1;
1<
0=
18
09
01
b1100 '
b1100 &
b1100 :
#130
02
0/
b1000100 !
b1000100 ?
0;
14
b1101 '
b1101 &
b1101 :
#140
b1000101 !
b1000101 ?
1.
1/
1;
0<
19
04
15
b1110 '
b1110 &
b1110 :
#150
0.
0/
b1000110 !
b1000110 ?
0;
14
11
b1111 '
b1111 &
b1111 :
#160
17
16
b110000 !
b110000 ?
1;
1<
1=
1>
08
09
04
05
01
b0 '
b0 &
b0 :
#170
b110001 "
b110001 +
b1 '
b1 %
b1 *
#180
b110010 "
b110010 +
b10 '
b10 %
b10 *
#190
b110011 "
b110011 +
b11 '
b11 %
b11 *
#200
b110100 "
b110100 +
b100 '
b100 %
b100 *
#210
b110101 "
b110101 +
b101 '
b101 %
b101 *
#220
b110110 "
b110110 +
b110 '
b110 %
b110 *
#230
b110111 "
b110111 +
b111 '
b111 %
b111 *
#240
b111000 "
b111000 +
b1000 '
b1000 %
b1000 *
#250
b111001 "
b111001 +
b1001 '
b1001 %
b1001 *
#260
b1000001 "
b1000001 +
b1010 '
b1010 %
b1010 *
#270
b1000010 "
b1000010 +
b1011 '
b1011 %
b1011 *
#280
b1000011 "
b1000011 +
b1100 '
b1100 %
b1100 *
#290
b1000100 "
b1000100 +
b1101 '
b1101 %
b1101 *
#300
b1000101 "
b1000101 +
b1110 '
b1110 %
b1110 *
#310
b1000110 "
b1000110 +
b1111 '
b1111 %
b1111 *
#320
b110000 "
b110000 +
b0 '
b0 %
b0 *
#330
b110001 #
b110001 )
b1 '
b1 $
b1 (
#340
b110010 #
b110010 )
b10 '
b10 $
b10 (
#350
b110011 #
b110011 )
b11 '
b11 $
b11 (
#360
b110100 #
b110100 )
b100 '
b100 $
b100 (
#370
b110101 #
b110101 )
b101 '
b101 $
b101 (
#380
b110110 #
b110110 )
b110 '
b110 $
b110 (
#390
b110111 #
b110111 )
b111 '
b111 $
b111 (
#400
b111000 #
b111000 )
b1000 '
b1000 $
b1000 (
#410
b111001 #
b111001 )
b1001 '
b1001 $
b1001 (
#420
b1000001 #
b1000001 )
b1010 '
b1010 $
b1010 (
#430
b1000010 #
b1000010 )
b1011 '
b1011 $
b1011 (
#440
b1000011 #
b1000011 )
b1100 '
b1100 $
b1100 (
#450
b1000100 #
b1000100 )
b1101 '
b1101 $
b1101 (
#460
b1000101 #
b1000101 )
b1110 '
b1110 $
b1110 (
#470
b1000110 #
b1000110 )
b1111 '
b1111 $
b1111 (
#480
b110000 #
b110000 )
b10000 '
b0 $
b0 (
